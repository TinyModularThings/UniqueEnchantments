plugins {
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
}

version = "1.19.2-"+new Date().format("dd")+"-"+Math.abs(new Random().nextInt())
group = "uniquee"
archivesBaseName = "Unique Enchantments"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
}

minecraft {
    mappings channel: 'official', version: '1.19.2'
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=uniquebase.mixins.json"
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=uniquebase.mixins.json"
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=uniquebase.mixins.json"
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets {
	tools {
		java {
    		compileClasspath += main.output
        	runtimeClasspath += main.output
    	}
   	}
}

configurations {
    toolsImplementation.extendsFrom implementation;
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.19.2-43.3.0'
	implementation fg.deobf("curse.maven:carbon-config-898104:4952985")
	implementation fg.deobf("curse.maven:jei-238222:4434397")
	implementation fg.deobf("curse.maven:patchouli-306770:4031402")
	implementation fg.deobf("curse.maven:embeddium-908741:4984830")
	implementation fg.deobf("curse.maven:enchantment-descriptions-250419:4277356")
	implementation fg.deobf("curse.maven:apotheosis-313970:5322410")
	implementation fg.deobf("curse.maven:placebo-283644:5180198")
	implementation fg.deobf("curse.maven:bookshelf-228525:4354814")
	implementation fg.deobf("curse.maven:curios-309927:4418021")
	
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, "mixins.uniquebase.refmap.json"
}

task runAutomatedIconGen(type: JavaExec) {
	group = 'internal'
	description = 'Generates the Icon Uniquecodes automatically'
    classpath = sourceSets.tools.runtimeClasspath
    main = 'automation.AutomatedIconGen'
    args file('src/main/resources').absolutePath, file('src/tools/resources/icons.json')
}

jar {
    manifest {
        attributes([
            "Specification-Title": "uniquee",
            "Specification-Vendor": "uniquee",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"uniquee",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "uniquebase.mixins.json"
        ])
    }
    includeEmptyDirs = false
}
jar.finalizedBy('reobfJar') 

task baseJar(type: Jar, dependsOn: reobf) {
  baseName = BASE_NAME
  version = MC_VERSION+"-"+BASE_VERSION
  from(zipTree(jar.archivePath)) {
    include 'META_INF/MANIFEST.MF'
    include '**/uniquebase/**/*'
    include '**/assets/uniquebase/**/*'
    include '**/assets/mc/**/*'
    include 'pack.mcmeta'
    include 'uniquebase.mixins.json'
    include 'mixins.uniquebase.refmap.json'
  }
  manifest {
       attributes([
           "MixinConfigs": "uniquebase.mixins.json"
      ])
  }
  from(zipTree(jar.archivePath)) {
    	include 'META-INF/unique_base_mods.toml'
    	rename 'unique_base_mods.toml', 'mods.toml'
   		expand 'version': BASE_VERSION
  }
  includeEmptyDirs = false
}

task mainJar(type: Jar, dependsOn: reobf) {
  baseName = UE_NAME
  version = MC_VERSION+"-"+UE_VERSION
  from(zipTree(jar.archivePath)) {
    include 'META_INF/MANIFEST.MF'
    include '**/uniquee/**/*'
    include '**/assets/uniquee/**/*'
    include '**/data/uniquee/**/*'
    include '**/data/forge/**/*'
    include 'pack.mcmeta'
  }
  from(zipTree(jar.archivePath)) {
    	include 'META-INF/uniquee_mods.toml'
   		rename 'uniquee_mods.toml', 'mods.toml'
   		expand 'version': UE_VERSION, 'base_version': BASE_VERSION
  }
  includeEmptyDirs = false
}

task utilsJar(type: Jar, dependsOn: reobf) {
  baseName = UTILS_NAME
  version = MC_VERSION+"-"+UTILS_VERSION
  from(zipTree(jar.archivePath)) {
    include 'META_INF/MANIFEST.MF'
    include '**/uniqueeutils/**/*'
    include '**/assets/uniqueutil/**/*'
    include 'pack.mcmeta'
  }
  from(zipTree(jar.archivePath)) {
    	include 'META-INF/unique_utils_mods.toml'
   		rename 'unique_utils_mods.toml', 'mods.toml'
   		expand 'version': UTILS_VERSION, 'base_version': BASE_VERSION
  }
  includeEmptyDirs = false
}

task battleJar(type: Jar, dependsOn: reobf) {
  baseName = BATTLE_NAME
  version = MC_VERSION+"-"+BATTLE_VERSION
  from(zipTree(jar.archivePath)) {
    include 'META_INF/MANIFEST.MF'
    include '**/uniqueebattle/**/*'
    include '**/assets/uniquebattle/**/*'
    include '**/data/uniquebattle/**/*'
    include 'pack.mcmeta'
  }
  from(zipTree(jar.archivePath)) {
    	include 'META-INF/unique_battle_mods.toml'
   		rename 'unique_battle_mods.toml', 'mods.toml'
   		expand 'version': BATTLE_VERSION, 'base_version': BASE_VERSION
  }
  includeEmptyDirs = false
}

task apexJar(type: Jar, dependsOn: reobf) {
  baseName = APEX_NAME
  version = MC_VERSION+"-"+APEX_VERSION
  from(zipTree(jar.archivePath)) {
    include 'META_INF/MANIFEST.MF'
    include '**/uniqueapex/**/*'
    include '**/assets/uniqueapex/**/*'
    include '**/data/uniqueapex/**/*'
    include 'pack.mcmeta'
  }
  from(zipTree(jar.archivePath)) {
    	include 'META-INF/unique_apex_mods.toml'
   		rename 'unique_apex_mods.toml', 'mods.toml'
   		expand 'version': APEX_VERSION, 'base_version': BASE_VERSION
  }
  includeEmptyDirs = false
}

artifacts {
    archives baseJar
    archives mainJar
    archives utilsJar
    archives battleJar
    archives apexJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

def props = new Properties()
file("publish.cfg").withInputStream { props.load(it) }
System.out.println("Props: "+props);

task curseforge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) { 
	mustRunAfter assemble
	dependsOn assemble
	group 'publishing'
	description 'Publishes the mod to Curseforge'
	apiToken = System.getenv("Curseforge_API_Token")
	if(Boolean.parseBoolean(props.get("BASE"))) {
		def mainFile = upload(515658, baseJar)
		mainFile.releaseType = RELEASE_TYPE
		mainFile.displayName = BASE_NAME+"-"+MC_VERSION+"-"+BASE_VERSION
		
		def change = new File(projectDir, "/changelogs/base/"+BASE_VERSION.replace(".", "")+".md");
		mainFile.changelog = change.exists() ? change.getText('UTF-8') : "";
		mainFile.changelogType = 'markdown'
		mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
		mainFile.addJavaVersion('Java 17')
	}
	
	if(Boolean.parseBoolean(props.get("UE"))) {
		def mainFile = upload(348891, mainJar)
		mainFile.releaseType = RELEASE_TYPE
		mainFile.displayName = UE_NAME+"-"+MC_VERSION+"-"+UE_VERSION
		
		def change = new File(projectDir, "/changelogs/ue/"+UE_VERSION.replace(".", "")+".md");
		mainFile.changelog = change.exists() ? change.getText('UTF-8') : "";
		mainFile.changelogType = 'markdown'
		mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
		mainFile.addJavaVersion('Java 17')
		mainFile.addRequirement('unique-enchantments-base')
	}
	
	if(Boolean.parseBoolean(props.get("UTILS"))) {
		def mainFile = upload(382138, utilsJar)
		mainFile.releaseType = RELEASE_TYPE
		mainFile.displayName = UTILS_NAME+"-"+MC_VERSION+"-"+UTILS_VERSION
		
		def change = new File(projectDir, "/changelogs/utils/"+UTILS_VERSION.replace(".", "")+".md");
		mainFile.changelog = change.exists() ? change.getText('UTF-8') : "";
		mainFile.changelogType = 'markdown'
		mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
		mainFile.addJavaVersion('Java 17')
		mainFile.addRequirement('unique-enchantments-base')
	}
	
	if(Boolean.parseBoolean(props.get("BATTLE"))) {
		def mainFile = upload(491806, battleJar)
		mainFile.releaseType = RELEASE_TYPE
		mainFile.displayName = BATTLE_NAME+"-"+MC_VERSION+"-"+BATTLE_VERSION
		
		def change = new File(projectDir, "/changelogs/battle/"+BATTLE_VERSION.replace(".", "")+".md");
		mainFile.changelog = change.exists() ? change.getText('UTF-8') : "";
		mainFile.changelogType = 'markdown'
		mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
		mainFile.addJavaVersion('Java 17')
		mainFile.addRequirement('unique-enchantments-base')
	}
	
	if(Boolean.parseBoolean(props.get("APEX"))) {
		def mainFile = upload(596310, apexJar)
		mainFile.releaseType = RELEASE_TYPE
		mainFile.displayName = APEX_NAME+"-"+MC_VERSION+"-"+APEX_VERSION
		
		def change = new File(projectDir, "/changelogs/apex/"+APEX_VERSION.replace(".", "")+".md");
		mainFile.changelog = change.exists() ? change.getText('UTF-8') : "";
		mainFile.changelogType = 'markdown'
		mainFile.addGameVersion(MC_VERSION, 'Server', 'Client')
		mainFile.addJavaVersion('Java 17')
		mainFile.addRequirement('unique-enchantments-base')
	}
}